---
layout:     post
title:      "TCP三次握手"
subtitle:   ""
date:       2017-02-05 14:00:00
author:     "bigfacexml"
catalog: true
tags:
    - 网络
---

#### 1. 握手目的
* TCP进行握手初始化一个连接的目的是：分配资源、初始化序列号（通知peer对端我的初始序列号，即SYN包中seq=x，x为初始值，后续seq在前一个seq基础上自增1）。
* TCP断开连接的目标是：回收资源、终止数据传输。由于TCP是全双工，peer需要各自拆除通向peer对端方向的通信信道。这样需要四次挥手来分别拆除通信信道。
* seq的作用是，表明数据包的序列号，且要求回包序列号必须是seq+1，即ACK=seq+1，这样才能确认响应包的身份（对应哪个请求包，以及请求包的合法性，因为可能有冒充者）

![](https://ww2.sinaimg.cn/large/006tNbRwgw1fbje38staij30ob0r477s.jpg)

#### 2. 三次握手过程
* client端通过SYN包发送连接请求，并告知初始序列号seq=x
* server端收到SYN包后，需要回复一个ACK包（ACK=x+1)，告诉client说我收到了；另外还需要发送一个SYN包告知seq=y；这两个包因为是连续的，可以合并到一个包里面一起发送
* client端回复ACK包(ACK=y+1)

>于是，三次握手过程结束，可靠连接也建立起来了。之所以为三次，是因为第二步的server端合并了ACK包和SYN包。这样一来省了一次交互，同时也可以方便与client发起连接的SYN包进行区分（区分SYN包是作为发起连接的SYN包，还是作为响应的SYN包）


#### 3. 四次挥手过程
* client发送一个FIN包，告诉server我已经没有数据发送给对方了
* server回复一个ACK。但server可能还没有准备好关闭连接（很大可能还有数据待发送）
* server在准备好关闭连接后（没有数据发送），server也发送一个FIN包
* client回复一个ACK

>需要说明的是，这里的client和server可以互换，即server也可以主动请求关闭连接；  
另外，之所以为四次，前面已经提到全双工的通信方式，需要两端各自拆除信道。而且server端的ACK包不能和FIN包因为时间上不连续所以不能合并。

![](https://ww1.sinaimg.cn/large/006tNbRwgw1fbje5zyu56j30fm0m9414.jpg)

#### 4. 重要参数的说明
* 初始化序列号（ISN）不能固定
 
> 即发起连接的初始化序列号x或y不能固定。假设固定为1，client连续给server发送了10个包，并被路由器缓存了，碰巧这时候client挂掉了。然后client用同样的端口和ip重新连接server（四元素相同，源IP和端口，目的IP和端口），仍从seq=1开始发送请求包，假设发了5个，之前被路由器缓存的10个包都被顺利发送给了server，然后server都有回包。这时候client凌乱了，我seq才到5，但ACK都到10+1了，什么情况？
> 初始序列号是随机的，而且是32位，会回绕

* SYN超时问题

> SYN包如果出现超时情况，Linux下默认会进行5次重试，重试间隔依次为1, 2, 4, 8, 16,第五次发出后还要等32秒判断是否超时。所以，总共需要63秒重试5次都超时，才会断开连接。  
> 但是，这种重试机制可能导致server发送SYN并等待client的ACK后，因为等待时间太长，导致攻击者如果发起大量SYN包给server（俗称SYN flood攻击），耗尽server的SYN队列。对此linux提供了几个参数来应对这种攻击。

* TIME_WAIT状态

> 主动关闭方在收到FIN后回复ACK包会进入TIME_WAIT状态，需要等待2*MSL那么长时间才能断开连接释放资源。原因是：如果不设置这个状态，假如发送的ACK包在路由过程中丢失，被动关闭方因为收不到ACK会超时重发FIN包，但因为没有TIME_WAIT状态也就是说主动关闭方已经释放连接资源了，也不会收到FIN包，更不能回ACK包，导致对方不能正常关闭连接。  
> TIME_WAIT也会带来一些问题：主动关闭方要等待较长时间才能断开连接，如果服务器作为主动关闭方，如果短时间关闭了大量连接，就会出现大量TIME_WAIT，占据大量tuple，严重消耗服务器资源；如果client作为主动关闭方，短时间关闭大量连接会占用大量端口，毕竟端口只有65535个。（如果是客户端连本机的服务，本机同时作为client和server，因为两种问题情况同时存在，所以连接的时候首选UNIX套接字而不是TCP）。  
> TIMEWAIT回收和重用，简单带过。    

#### 5. 超时重传
* ACK延迟确认机制：如果每个TCP包都要有ACK包确认，那么大量的ACK会消耗大量的带宽。实际上ACK是捎带数据包进行确认的（TCP包头会有ACK字段）。RFC确认了一种延迟的ACK，延迟一段时间，如果有捎带数据，就随数据包一起发送。即使没有捎带数据，延迟的这段时间内如果收到多个包，只需要对最大序列号的包进行确认。
* 超时计算：与RTT相关，有个计算超时的算法。RTO（Retransmission TimeOut)是动态变化的。
* 定时器：每个TCP连接维护一个单例定时器，用于计算是否出现超时的情况。RFC给出了定时器的设计建议算法规则，大致意思是：



 ```
[1]. 每一次一个包含数据的包被发送（包括重发），如果还没开启重传定时器，则开启它，使得它在RTO秒之后超时（按照当前的RTO值）。  
[2]. 当接收到一个ACK确认一个新的数据, 如果所有的发出数据都被确认了，关闭重传定时器。  
[3]. 当接收到一个ACK确认一个新的数据，还有数据在传输，也就是还有没被确认的数据，重新启动重传  定时器，使得它在RTO秒之后超时（按照当前的RTO值）。  
当重传定时器超时后，依次做下列3件事情：  
[4.1]. 重传最早的尚未被TCP接收方ACK的数据包   
[4.2]. 重新设置RTO 为 RTO * 2（“还原定时器”），但是新RTO不应该超过RTO的上限(RTO有个上限值，这个上限值最少为60s)  
[4.3]. 重启重传定时器。
```

#### 6. 重传机制
* 选择重传。也就是说，接收方可以告诉发送方，哪些包丢失了，然后发送方可以对丢失的包进行重传。（SACK选择确认机制）
* 另外，对SACK进行扩展的DSACK，可以说明更多的额外信息：发送方可以判断出是发包丢失了还是ACK丢失。如果收到D-SACK包，可以说明接收方的ACK丢失了或者发送的包延迟到达了。由此可以推断，如果发送方收到较多D-SACK包，说明RTO设置小了，导致过早重传；

#### 7. 流量控制
* 滑动窗口机制。接收方维护一个滑动窗口，包含四部分，（已发送并ACK、已发送但未ACK、未发送但允许发送（接收方还有空间）、未发送且不允许发送）。窗口大小为接收方允许接收的最大空间。发送方维护一个一样大小的窗口，由接收端控制（接收窗口，rwnd)。
* 如果窗口大小为0，发送方将不能继续发送数据。但会保持发送ZWP包探测窗口大小，一般会探测三次，三次等待后如果还是窗口为0，有的TCP连接会RST掉这个连接。注意：有等待的地方就有DDoS攻击点。攻击者可以和server建立连接后，向server通告窗口为0，导致server发ZWP探测并等待。短时间内如果大量这样的请求，会把server资源耗尽。

#### 8. 拥塞控制
* 拥塞窗口cwnd。慢启动、快收敛
* TCP协议的拥塞控制的公平性。TCP连接越多，分到的带宽越多（举例就是迅雷下载，开很多的连接分片下载，导致宿舍其他人的网速收到严重影响）

#### 9. 其他
* 系统调用listen() 的backlog参数指的是什么  
要说明backlog参数的含义，首先需要说一下Linux的协议栈维护的TCP连接的两个连接队列：   
[1]SYN半连接队列；当这个队列满了，Server会丢弃新来的SYN包，而Client端在多次重发SYN包得不到响应而返回`connection time out`错误。    
[2]accept连接队列  ；当accept连接队列满了，协议栈的行为根据（/proc/sys/net/ipv4/tcp_abort_on_overflow）内核参数而定。 如果tcp_abort_on_overflow=1，server在收到SYN_ACK的ACK包后，协议栈会丢弃该连接并回复RST包给对端，这个是Client会出现`connection reset by peer`错误。如果tcp_abort_on_overflow=0，server在收到SYN_ACK的ACK包后，直接丢弃该ACK包。这个时候Client认为连接已经建立了，一直在等Server的数据，直到超时出现`read timeout`错误。
